# Build stage
FROM node:18-alpine as build

# Set working directory
WORKDIR /app

# Set environment variables to improve npm behavior
ENV NODE_ENV=production \
    NPM_CONFIG_LOGLEVEL=warn \
    NPM_CONFIG_FUND=false

# Create non-root user for build stage
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copy package files
COPY frontend/package.json frontend/package-lock.json* ./

# Install dependencies with clean cache
RUN npm ci --quiet && npm cache clean --force

# Copy the frontend code
COPY frontend/ .

# Set ownership for security
RUN chown -R appuser:appgroup /app

# Switch to non-root user for build
USER appuser

# Build the app
RUN npm run build

# Production stage
FROM nginx:alpine

# Create non-root user for nginx
RUN addgroup -S nginxgroup && \
    adduser -S nginxuser -G nginxgroup

# Create directory structure and set permissions
RUN mkdir -p /var/cache/nginx /var/run \
    && chown -R nginxuser:nginxgroup /var/cache/nginx /var/run

# Copy built files from the build stage
COPY --from=build --chown=nginxuser:nginxgroup /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Set permissions for nginx config
RUN touch /var/run/nginx.pid && \
    chown -R nginxuser:nginxgroup /var/run/nginx.pid /etc/nginx/conf.d/default.conf

# Add health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:80/ || exit 1

# Switch to non-root user
USER nginxuser

# Expose port
EXPOSE 80

# Start Nginx server
CMD ["nginx", "-g", "daemon off;"]
